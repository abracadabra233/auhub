name: hosted-pure-workflow
on:
  push:
    # branches:
    #   - main
    tags:
      - "v*"

jobs:
  build:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
        # os: [ubuntu-24.04, ubuntu-22.04, ubuntu-latest-arm64]
    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
      # for Binary Caching.
      - uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest

      # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
      # when it is being run afterwards by CMake.
      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install
      # the dependencies as specified in vcpkg.json. Note that the vcpkg's toolchain is specified
      # in the CMakePresets.json file.
      # This step also runs vcpkg with Binary Caching leveraging GitHub Action cache to
      # store the built packages artifacts.
      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset ninja-multi-vcpkg

      # - name: check-format
      #   if: runner.os == 'Linux'
      #   run: |
      #     cmake --workflow --preset check-format

      # Build (Release configuration only) the whole project with Ninja (which is spawn by CMake).
      #
      # Note: if the preset misses the "configuration", it is possible to explicitly select the
      # configuration with the `--config` flag, e.g.:
      # run: cmake --build --preset ninja-vcpkg --config Release
      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release

      # Test the whole project with CTest, again Release configuration only.
      # - name: Test (Release configuration)
      #   run: |
      #     ctest --preset test-release

      - name: Package Release Binaries
        shell: bash
        run: |
          mkdir -p dist
          cp -r build/bin/callee/Release "callee-${{ matrix.os }}"
          cp -r build/bin/caller/Release "caller-${{ matrix.os }}"
          cp -r build/bin/examples/Release "examples-${{ matrix.os }}"
          zip -r "dist/callee-${{ matrix.os }}.zip" "callee-${{ matrix.os }}/"
          zip -r "dist/caller-${{ matrix.os }}".zip "caller-${{ matrix.os }}/"
          zip -r "dist/examples-${{ matrix.os }}".zip "examples-${{ matrix.os }}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: |
            dist/*.zip
          retention-days: 1

  create-release:
    name: Create Release and Upload Assets
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_type == 'tag'
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/binaries-*/*.zip
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}
          draft: false
          prerelease: false
